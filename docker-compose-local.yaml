services:
  frontend:
    build:
      context: ./frontend
      dockerfile: local.Dockerfile
    container_name: react-frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
    env_file:
      - .env.local
    ports:
      - "3000:3000"
    networks:
      - webnet

  backend:
    build:
      context: ./backend
      dockerfile: local.Dockerfile
    container_name: python-backend
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    networks:
      - webnet
    environment:
      - SLACK_WEBHOOK=https://hooks.slack.com/services/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
      - ENVIRONMENT=local
      - PYTHONUNBUFFERED=1
      - MONGO_HOST=mongo
      - MONGO_PORT=27017
      - MONGO_DB=images
      - MONGO_USER=mongo
      - MONGO_PASSWORD=kenomuki
    restart: on-failure

  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "9001:9001"
      - "9000:9000"
    environment:
      MINIO_ROOT_USER: muki
      MINIO_ROOT_PASSWORD: kenomuki
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - webnet
    restart: always

  mongodb:
    image: mongo:6
    container_name: mongo
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: images
      MONGO_INITDB_ROOT_USERNAME: mongo
      MONGO_INITDB_ROOT_PASSWORD: kenomuki
    volumes:
      - mongo_data:/data/db
    networks:
      - webnet
    restart: always


networks:
  webnet:

volumes:
  minio_data:
  mongo_data:

