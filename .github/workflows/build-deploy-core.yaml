name: Build Deploy Core App
on:
  push:
    branches: [master]
    paths:
      - 'frontend/**'
      - 'backend-core/**'
      - 'backend-image-generation/**'

jobs:
  # Generate short SHA for all builds to use
  prepare:
    runs-on: ubuntu-latest
    outputs:
      short_sha: ${{ steps.set_output.outputs.short_sha }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set short SHA
        id: set_output
        run: echo "short_sha=${GITHUB_SHA::10}" >> $GITHUB_OUTPUT

  # SonarQube Security Analysis - runs first to block if issues found
  sonarqube-analysis:
    name: SonarQube Security Analysis
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better analysis
      
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v6
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}  # https://sonarqube.kdidp.art
      
      # Block deployment if Quality Gate fails (critical security issues)
      - name: SonarQube Quality Gate
        uses: SonarSource/sonarqube-quality-gate-action@v1
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        # This will fail the job if critical security issues are found

  # Build frontend - only runs if SonarQube passes
  build-frontend:
    runs-on: ubuntu-latest
    needs: [prepare, sonarqube-analysis]  # Added sonarqube-analysis dependency
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Docker TLS Setup + Build Frontend
        run: |
          cp .docker/* .
          chmod +x ./docker-tls-setup.sh
          source docker-tls-setup.sh
          
          cd $GITHUB_WORKSPACE/frontend/
          docker build -t ${{ secrets.DOCKER_USERNAME }}/anonymous_quotes_frontend:${{ needs.prepare.outputs.short_sha }} .
        env:
          DOCKER_HOST: ${{ secrets.DOCKER_HOST }}
          CERT_PEM: ${{ secrets.CERT_PEM }}
          KEY_PEM: ${{ secrets.KEY_PEM }}
          CA_PEM: ${{ secrets.CA_PEM }}

  # Build backend-core - only runs if SonarQube passes
  build-backend-core:
    runs-on: ubuntu-latest
    needs: [prepare, sonarqube-analysis]  # Added sonarqube-analysis dependency
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Docker TLS Setup + Build Backend Core
        run: |
          cp .docker/* .
          chmod +x ./docker-tls-setup.sh
          source docker-tls-setup.sh
          
          cd $GITHUB_WORKSPACE/backend-core/
          docker build -t ${{ secrets.DOCKER_USERNAME }}/anonymous_quotes_backend_core:${{ needs.prepare.outputs.short_sha }} .
        env:
          DOCKER_HOST: ${{ secrets.DOCKER_HOST }}
          CERT_PEM: ${{ secrets.CERT_PEM }}
          KEY_PEM: ${{ secrets.KEY_PEM }}
          CA_PEM: ${{ secrets.CA_PEM }}

  # Build backend-image-generation - only runs if SonarQube passes
  build-backend-image:
    runs-on: ubuntu-latest
    needs: [prepare, sonarqube-analysis]  # Added sonarqube-analysis dependency
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Docker TLS Setup + Build Backend Image Generation
        run: |
          cp .docker/* .
          chmod +x ./docker-tls-setup.sh
          source docker-tls-setup.sh
          
          cd $GITHUB_WORKSPACE/backend-image-generation/
          docker build -t ${{ secrets.DOCKER_USERNAME }}/anonymous_quotes_backend_image_generation:${{ needs.prepare.outputs.short_sha }} .
        env:
          DOCKER_HOST: ${{ secrets.DOCKER_HOST }}
          CERT_PEM: ${{ secrets.CERT_PEM }}
          KEY_PEM: ${{ secrets.KEY_PEM }}
          CA_PEM: ${{ secrets.CA_PEM }}

  # Deploy only after all builds complete AND SonarQube passes
  deploy-core:
    runs-on: ubuntu-latest
    needs: [prepare, build-frontend, build-backend-core, build-backend-image, sonarqube-analysis]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.3.3/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
      - name: Docker TLS Setup + Docker Compose
        run: |
          cp .docker/* .
          chmod +x ./docker-tls-setup.sh
          source docker-tls-setup.sh
          docker-compose up -d
          docker restart nginx-gateway
        env:
          DOCKER_HOST: ${{ secrets.DOCKER_HOST }}
          CERT_PEM: ${{ secrets.CERT_PEM }}
          KEY_PEM: ${{ secrets.KEY_PEM }}
          CA_PEM: ${{ secrets.CA_PEM }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          TAG: ${{ needs.prepare.outputs.short_sha }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          PG_USER: ${{secrets.PG_USER}}
          PG_PASSWORD: ${{secrets.PG_PASSWORD}}
          MINIO_ROOT_PASSWORD: ${{secrets.MINIO_ROOT_PASSWORD}}
          MINIO_ROOT_USER: ${{secrets.MINIO_ROOT_USER}}
          MONGO_DB: ${{secrets.MONGO_INITDB_DATABASE}}
          MONGO_USER: ${{secrets.MONGO_INITDB_ROOT_USERNAME}}
          MONGO_PASSWORD: ${{secrets.MONGO_INITDB_ROOT_PASSWORD}}
